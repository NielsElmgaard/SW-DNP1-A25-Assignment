@page "/users"
@using ApiContracts_DTOs
@using BlazorClient.Services
@attribute [StreamRendering]
@inject IUserService UserService

<PageTitle>Users</PageTitle>

<h1>Users</h1>
<a href="/CreateUser" class="btn btn-dark mb-3"> Create New User</a>

@if (users == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="mb-2 w-25">
        <SearchBox Type="text" Label="Search by starts with username"
                   Placeholder="Enter starts with username"
                   OnSearchChanged="FilterByStartsWith"/>
    </div>
    <div class="mb-2 w-25">
        <SearchBox Type="text" Label="Sort by 'id_asc', 'id_desc' or 'username'"
                   Placeholder="Enter sort by"
                   OnSearchChanged="FilterBySortBy"/>
    </div>
    <table class="table">
        <thead>
        <tr>
            <th>User ID</th>
            <th>Username</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var user in filteredUsers)
        {
            <UserListItem User="user"/>
        }
        </tbody>
    </table>
}

@code {
    private IEnumerable<UserDTO>? users;
    private IEnumerable<UserDTO>? filteredUsers = Enumerable.Empty<UserDTO>();

    private string startsWithFilter = string.Empty;
    private string sortByFilter = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetUsersAsync(null, null);
        filteredUsers = users;
    }

    private async Task FilterByStartsWith(string startsWith)
    {
        startsWithFilter = startsWith;
        await FilterUsers();
    }

    private async Task FilterBySortBy(string sortBy)
    {
        sortByFilter = sortBy;
        await FilterUsers();
    }

    private async Task FilterUsers()
    {
        filteredUsers = await UserService.GetUsersAsync(
            string.IsNullOrWhiteSpace(startsWithFilter) ? null : startsWithFilter,
            string.IsNullOrWhiteSpace(sortByFilter) ? null : sortByFilter
        );
    }

}