@page "/Posts/{PostId:int}"
@inject IPostService PostService
@inject ICommentService CommentService

@if (post == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <h1>@post.Title</h1>
    <p class="border text-center px-3 py-2 d-inline-block" id="post-author">
        Author: <span class="fw-semibold">@post.Author.Username</span></p>
    <div class="post-body">
        <p>@post.Body</p>
    </div>
    <hr/>
    @if (post.Comments != null)
    {
        <div class="mb-2 w-25">
            <SearchBox Type="number" Label="Filter by User id" Placeholder="Enter user id"
                       OnSearchChanged="FilterByUserId"/>
        </div>
        <div class="mb-2 w-25">
            <SearchBox Type="text" Label="Filter by Author" Placeholder="Enter author"
                       OnSearchChanged="FilterByAuthor"/>
        </div>
        <div class="mb-2 w-25">
            <SearchBox Type="text" Label="Sort by 'userid_asc' or 'userid_desc'"
                       Placeholder="Enter sort by"
                       OnSearchChanged="FilterBySortBy"/>
        </div>
        <CommentList Comments="filteredComments"/>
    }
    
    <hr/>
    
    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <p class="text-danger">@errorMessage</p>
    }
    <p class="h5">Create Comment:</p>
    <input type="number" @bind="commentUserId"
           placeholder="Enter your User Id"
           class="text-center form-control-lg mb-2 px-3 py-2 d-inline-block"/>
    <textarea @bind="commentBody" placeholder="Write your comment here"
              class="form-control mb-2"/>
    <button class="btn btn-dark"
            @onclick="async ()=> await CreateComment(commentBody,commentUserId)">
        Submit
    </button>
}

@code {
    [Parameter] public int PostId { get; set; }

    private PostWithCommentsDTO? post;
    
    private IEnumerable<CommentDTO>? filteredComments = Enumerable.Empty<CommentDTO>();

    private string commentBody { get; set; } = string.Empty;
    private int? commentUserId { get; set; } = null; // No authentication yet
    private string? errorMessage;

    
    private string userIdFilter = string.Empty;
    private string authorFilter = string.Empty;
    private string postIdFilter = string.Empty;
    private string sortByFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        post = await PostService.GetSinglePostByIdAsync(PostId, "comments");
        filteredComments = post.Comments;
    }

    private async Task CreateComment(string body, int? userid)
    {
        try
        {
            CreateCommentDTO commentRequest = new CreateCommentDTO { Body = body, PostId = PostId, UserId = userid };
            await CommentService.CreateCommentAsync(commentRequest);
            var refreshedPost = await PostService.GetSinglePostByIdAsync(PostId, "comments");
            if (refreshedPost != null)
            {
                post = refreshedPost;
                filteredComments = post.Comments;
                errorMessage = string.Empty;
            }

            commentBody = string.Empty;
            commentUserId = null;
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }
    
    private async Task FilterByUserId(string userid)
    {
        userIdFilter = userid;
        await FilterComments();
    }
    
    private async Task FilterByAuthor(string author)
    {
        authorFilter = author;
        await FilterComments();
    }
    
    private async Task FilterByPostId(string postid)
    {
        postIdFilter = postid;
        await FilterComments();
    }

    private async Task FilterBySortBy(string sortBy)
    {
        sortByFilter = sortBy;
        await FilterComments();
    }
    
    private async Task FilterComments()
    {
        int? userIdQueryParameter = null;


        if (!string.IsNullOrWhiteSpace(userIdFilter) && int.TryParse(userIdFilter, out var userid))
        {
            userIdQueryParameter = userid;
        }
        

        filteredComments = await CommentService.GetCommentsAsync(userIdQueryParameter,
            string.IsNullOrWhiteSpace(authorFilter) ? null : authorFilter,
            null,
            string.IsNullOrWhiteSpace(sortByFilter) ? null : sortByFilter
        );
    }

}